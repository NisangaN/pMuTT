# -*- coding: utf-8 -*-
"""
pMuTT.io_.chemkin

Reads reactions lists from Chemkin gas.inp and surf.inp files
"""
import re
import numpy as np
from pMuTT import pMuTT_list_to_dict, _force_pass_arguments


def read_reactions(filename, species=None):
    """Directly read reactions from Chemkin gas.inp or surf.inp files

    Parameters
    ----------
        filename : str
            Input filename for Chemkin surf or gas .inp file
        species : obj
            List of NASA objects containing thermodynamic properties for
            all Reactants and Products in Reactions
            default = None. Will not return React_obj and Prod_obj
    Returns
    -------
        Reactions   : list of reactions
        Reactants   : list of reactants found in reactions
        React_obj   : list of NASA polynomials for each Reactant
                      If species object list is supplied
        React_stoic : list of reaction stoichiometries for Reactants
        Products    : list of products found in reactions
        Prod_obj    : list of NASA polynomials for each Product
                      If species object list is supplied
        Prod_stoic  : list of reaction stoichiometries for Products
    Raises
    ------
        FileNotFoundError
            If the surf.inp or gas.inp file isn't found.
        NameError
            If the species file does not exist
        AttributeError
            If the species list is incorrect format
    """
    if species is not None:
        species_dict = pMuTT_list_to_dict(species)

    rxns = []
    with open(filename, 'r') as lines:
        for line in lines:
            if re.findall(r'(^[^\!].+)( *<*(?<![0-9][eE])[=\-]>* *)', line):
                rxns.append(line.strip())
    RHS = []
    LHS = []
    for rxn in rxns:
        LHS.append(re.split(r' *<*(?<![0-9][eE])[=\-]>* *', rxn)[0])
        RHS.append(re.split(r' *<*(?<![0-9][eE])[=\-]>* *', rxn)[1])
    Reactants = []
    Products = []
    React_obj = []
    Prod_obj = []
    React_stoic = []
    Prod_stoic = []
    for Reacs, Prods in zip(LHS, RHS):
        Reactants.append(re.split(r' *\+ *| +', Reacs))
        Products.append(re.split(r' *\+ *| +', Prods)[0:-3])
        R = []
        RS = []
        Rx = []
        for RR in Reactants[-1]:
            stoic = re.findall(r'^[0-9]*', RR)[0]
            if stoic == '':
                stoic = 1
            else:
                RR = RR.replace(stoic, "")
                stoic = int(stoic)
            Rx.append(RR)
            RS.append(stoic)
            if species is not None:
                R.append(species_dict[RR])
        Reactants[-1] = Rx
        React_stoic.append(RS)
        P = []
        PS = []
        Px = []
        for PP in Products[-1]:
            stoic = re.findall(r'^[0-9]*', PP)[0]
            if stoic == '':
                stoic = 1
            else:
                PP = PP.replace(stoic, "")
                stoic = int(stoic)
            Px.append(PP)
            PS.append(stoic)
            if species is not None:
                P.append(species_dict[PP])
        Products[-1] = Px
        Prod_stoic.append(PS)
        React_obj.append(R)
        Prod_obj.append(P)
    Reactions = []
    for rxn, Prods in zip(rxns, Products):
        Reactions.append(rxn[0:rxn.rindex(Prods[-1]) + len(Prods[-1])])
    if species is not None:
        return(Reactions, Reactants, React_obj, React_stoic,
               Products, Prod_obj, Prod_stoic)
    else:
        return(Reactions, Reactants, React_stoic, Products, Prod_stoic)

def write_EAs(reactions, conditions, filename='EAs.inp', 
              method_name='get_delta_GoRT', float_format=' .2E', newline='\n',
              column_delimiter='  '):
    """Writes the EAs.inp file for Chemkin

    Parameters
    ---------- 
        reactions : :class:`~pMuTT.reaction.Reactions` object
            Reactions to write
        conditions : list of dicts
            Conditions to evaluate each reaction. The key of the dictionaries
            should be a relevant quantity to evaluate the reaction (e.g. T, P)
        filename : str, optional
            Filename for the EAs.inp file. Default is 'EAs.inp'
        method_name : str, optional
            Method to use to calculate values. Typical values are 
            'get_delta_GoRT' and 'get_delta_HoRT'
        float_format : float, optional
            Format to write numbers. Default is ' .2E' (standard format rounded
            to 2 decimal places with a preceding space if the value is positive)
        newline : str, optional
            Newline character to use. Default is the Linux newline character
        column_delimiter : str, optional
            Delimiter for columns. Default is '  '
    """
    n_reactions = len(reactions)
    # Add initial comment help line and number of reactions
    lines = [
        '!File generated by pMuTT',
        '!The first line is the number of reactions. Subsequent lines follow the format',
        '!of rxn (from surf.out) followed by the EA/RT value at each run condition.',
        '!There may be one slight deviation from surf.out: any repeated species should',
        '!be included in the reaction string with a stoichiometric coefficient equal to',
        '!the number of times the species appears in the reaction. If not using',
        '!MultiInput, then only the first value is used.',
        '  {}  !Number of reactions'.format(n_reactions)]

    # Find length to pad reactions
    rxn_len = []
    for reaction in reactions:
        rxn_str = reaction.to_string(species_delimiter='+',
                                     reaction_delimiter='<=>',
                                     include_TS=False)
        rxn_len.append(len(rxn_str))
    rxn_padding = np.max(rxn_len) + len(column_delimiter)

    # Define string formats to use
    float_field = '{:%s}' % float_format
    str_field = '{:%d}' % rxn_padding

    # Add comment line showing column numbers
    column_line = '!{}'.format(' '*(rxn_padding-1))
    float_field_len = len(float_field.format(np.pi))+len(column_delimiter)
    column_field = '{:> %d}' % float_field_len
    for i in range(len(conditions)):
        column_line += column_field.format(i+1)
    lines.append(column_line)

    # Add line for each reaction step
    for reaction in reactions:
        line = [str_field.format(reaction.to_string(species_delimiter='+',
                                                    reaction_delimiter='<=>',
                                                    include_TS=False))]
        for condition in conditions:
            method = getattr(reaction, method_name)

            # If the transition state does not exist
            if None in reaction.transition_state:
                condition['activation'] = False
                quantity = _force_pass_arguments(method, **condition)
                # If using enthalpies, activation energies have to be positive
                if method_name == 'get_delta_HoRT':
                    quantity = np.max([0., quantity])
            else:
                condition['activation'] = True
                quantity = _force_pass_arguments(method, **condition)

            line.append(float_field.format(quantity))
        lines.append(column_delimiter.join(line))
    lines.append('EOF')
    lines_str = '\n'.join(lines)
    with open(filename, 'w', newline=newline) as f_ptr:
        f_ptr.write(lines_str)