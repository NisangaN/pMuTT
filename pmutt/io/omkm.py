import datetime
from pmutt import _force_pass_arguments
from pmutt.io.cantera import obj_to_CTI
from pmutt.omkm.units import Units

def write_cti(reactions, species, phases, lateral_interactions=None,
              units=None, filename='input.cti', T=300., P=1., newline='\n',
              use_motz_wise=False):
    """Writes the species and reactions in the CTI format for OpenMKM
    
    Parameters
    ----------
    reactions : list of :class:`~pmutt.reaction.ChemkinReaction`
        Reactions to write. Species information will also be extracted from the
        reactions
    species : list of :class:`~pmutt.empirical.nasa.Nasa`, optional
        Species not specified in reactions that should also be written. Inert
        species should be specified here. Default is None
    filename: str, optional
        Filename for the input.cti file. Default is 'input.cti'
    units : dict or :class:`~pmutt.omkm.units.Unit` object, optional
        Units to write file. If a dict is inputted, the key is the quantity and
        the value is the unit. If not specified, uses the default units of
        :class:`~pmutt.omkm.units.Unit`
    T : float, optional
        Temperature in K. Default is 300 K.
    P : float, optional
        Pressure in atm. Default is 1 atm.
    """
    lines = ['# File generated by pmutt on {}'.format(datetime.datetime.now())]

    '''Write units'''
    lines.extend(['', '#' + '-'*80, '# UNITS', '#' + '-'*80])
    if units is None:
        units = Units()
    elif isinstance(units, dict):
        units = Units(**units)
    lines.append(units.to_CTI())

    '''Write phases'''
    lines.extend(['', '#' + '-'*80, '# PHASES', '#' + '-'*80])
    for phase in phases:
        try:
            lines.append(phase.to_CTI(quantity_unit=units.quantity,
                                      length_unit=units.length))
        except TypeError:
            lines.append(phase.to_CTI())


    '''Write species'''
    lines.extend(['', '#' + '-'*80, '# SPECIES', '#' + '-'*80])
    for ind_species in species:
        lines.append(ind_species.to_CTI())

    '''Write lateral interactions'''
    lines.extend(['', '#' + '-'*80, '# LATERAL INTERACTIONS', '#' + '-'*80])
    if lateral_interactions is not None:
        for lateral_interaction in lateral_interactions:
            lines.append(lateral_interaction.to_CTI(energy_unit=units.energy))

    '''Write reaction options'''
    lines.extend(['', '#' + '-'*80, '# REACTION OPTIONS', '#' + '-'*80])
    if use_motz_wise:
        lines.extend(['enable_motz_wise()\n'])
    else:
        lines.extend(['disable_motz_wise()\n'])

    '''Write reactions'''
    lines.extend(['', '#' + '-'*80, '# REACTIONS', '#' + '-'*80])
    for reaction in reactions:
        lines.append(reaction.to_CTI(quantity_unit=units.quantity,
                                     act_energy_unit=units.act_energy,
                                     length_unit=units.length))
    
    '''Write to file'''
    with open(filename, 'w', newline=newline) as f_ptr:
        f_ptr.write('\n'.join(lines))